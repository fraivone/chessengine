##### Function calling
_update_game_status->
    isMate ->
        _BlockingMoves->
            _ValidateMove->
                _MakeMove & _UndoMove->
                    UpdateAfterMove() ->
                        update_board_occupancy();
                        _update_landing_squares();
                        isCheck; 


landingsquares: 2bitboard, for white and black. Containing all possible landings of all pieces.
                Include landing on squares occupied by its own pieces, controlling them from king capture
                USED to calculate isCheck, isMate, isStaleMate
pseudo_moves: vector of moves that dont' land on own pieces. Divided by pieces

_ChainAssertCheck: given a board and some params -> Calculates occupancy -> Calculates landings -> Calculates pseudomoves -> controls for check




// Create a new vector and concatenate vector1 and vector2
    std::vector<int> concatenatedVector = vector1;
    concatenatedVector.insert(concatenatedVector.end(), vector2.begin(), vector2.end());



##Changes to simplify the structure


Do we need a class in the first place?
Maybe a simpler class can also Do

Class gets initialized from board?
Class stores current FEN

struct containing occupancy 
    occupancy white
    occupancy black
    ...
is a board simply an occupancy?
no board distinguish between pieces. 
Occupancy is the OR of all pieces
board <-> 

pseudomoves could be a vector associating move -> board

struct landing squares
    all possible landing squares as from 

struc game status (en passant, number of move, whoToMove, )


######### LUT ##########
######### ### ##########

// PAWN, KING , KNIGHT LUT are generated in ~500ns each
// PAWN, KING , KNIGHT LUT are LOADED    in ~20us 
These ones are too small to benefit from storing LUT