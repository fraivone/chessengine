/** @file */
#pragma once
#include <vector>
#include "types.hpp"
#include "print.hpp"

/// LUT that given a input bit returns a maks
/// Each mask cleans the occupancy board to get only the relevant bits for the rook movement
const LUT Line = {};
/// LUT that given a input bit returns a maks
/// Each mask cleans the occupancy board to get only the relevant bits for the bishop movement
const LUT Diago = {18049651735527936ULL,70506452091904ULL,275415828992ULL,1075975168ULL,38021120ULL,8657588224ULL,2216338399232ULL,567382630219776ULL,9024825867763712ULL,18049651735527424ULL,70506452221952ULL,275449643008ULL,9733406720ULL,2216342585344ULL,567382630203392ULL,1134765260406784ULL,4512412933816832ULL,9024825867633664ULL,18049651768822272ULL,70515108615168ULL,2491752130560ULL,567383701868544ULL,1134765256220672ULL,2269530512441344ULL,2256206450263040ULL,4512412900526080ULL,9024834391117824ULL,18051867805491712ULL,637888545440768ULL,1135039602493440ULL,2269529440784384ULL,4539058881568768ULL,1128098963916800ULL,2256197927833600ULL,4514594912477184ULL,9592139778506752ULL,19184279556981248ULL,2339762086609920ULL,4538784537380864ULL,9077569074761728ULL,562958610993152ULL,1125917221986304ULL,2814792987328512ULL,5629586008178688ULL,11259172008099840ULL,22518341868716544ULL,9007336962655232ULL,18014673925310464ULL,2216338399232ULL,4432676798464ULL,11064376819712ULL,22137335185408ULL,44272556441600ULL,87995357200384ULL,35253226045952ULL,70506452091904ULL,567382630219776ULL,1134765260406784ULL,2832480465846272ULL,5667157807464448ULL,11333774449049600ULL,22526811443298304ULL,9024825867763712ULL,18049651735527936ULL};

/*! Mirrors a byte (i.e. 00100011 --> 11000100 )
    \param uint8_t 
    \return unsigned char
*/  
unsigned char reverseByte(uint8_t);

/*! Mirrors a Bitboard horizontally.
    \param Bitboard 
    \return Bitboard
*/  
Bitboard MirrorBitboardHoriz(Bitboard);

/*! Prints on screen 64 bitboards, one for each square and in order. Each bitboard represents the possible landings from the starting position in case of linear movements.\n Used to generate the LUT LineMask.
    \return void
*/  
void generateLineMagicMask();


/*! Prints on screen 64 bitboards, one for each square and in order. Each bitboard represents the possible landings from the starting position in case of diagonal movements.\n Used to generate the LUT DiagoMask.
    \return void
*/  
void generateDiagoMagicMask();


/* Generate all blockers positions for the input square and the input move mask. This is a service methode to prepare the magic bitboard. Since the blockers will be computed by doing the *AND* with the mask, I just use the mask to generate all possbile blockers
    \param Bitboard Mask
    \param uint64_t square
    \return std::vector<Bitboard>
*/
std::vector<Bitboard> generateAllBlockers(Bitboard Mask);
